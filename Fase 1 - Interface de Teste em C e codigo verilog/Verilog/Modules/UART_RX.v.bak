module UART_RX
    #(parameter CLKS_PER_BIT = 5208) // 50000000)/(9600) = 5208
(
    input CLK,
    input input_rx,
    output full,
    output [7:0] out_rx,
);

/*ESTADOS DA UART*/
    localparam  IDLE = 2'b00,
                START = 2'b01,
                DATA = 2'b10,
                STOP = 2'b11;

/*RESOLVER PROBLEMA DE CAPTURA DE SINAL AO MANDAR OS BITS*/
    reg data_serial_buffer = 1'b1; // SINAL DA PORTA SERIAL É ALTO
    reg rx_data            = 1'b1;

    always @(posedge CLK) begin
        data_serial_buffer <= input_rx;
        rx_data            <= data_serial_buffer;
    end
     
     reg [1:0]  state      = 0;
     reg [15:0] counter    = 0;
     reg [2:0]  bit_index  = 0;
     reg        data_avail = 0;
     reg [7:0] data_reg    = 0;

    assign out_rx = data_reg;
    assign full = data_avail;
    
    /*TRANSINÇÃO DE ESTADOS*/
    always @(posedge CLK) begin
        case (state)
            IDLE:begin
                data_avail <= 0;
                counter    <= 0;
                bit_index  <= 0;
                if (rx_data == 0) // INICIO DO BIT DE START
                    state <= START;
                else
                    state <= IDLE; 
            end 
            START: begin
                if (counter == ( CLKS_PER_BIT - 1) / 2) begin
                    if (rx_data == 0) begin
                        counter <= 0;
                        state <= DATA;
                    end
                end
                else begin
                    counter <= counter + 16'b1;
                    state <= START;
                end 
            end
            DATA: begin
                if (counter < CLKS_PER_BIT - 1) begin
                    counter <= counter + 16'b1;
                    state <= DATA;
                end
                else begin
                    counter <= 0;
                    data_reg[bit_index] <= rx_data;

                    if (bit_index < 7) begin
                        bit_index <= bit_index + 3'b1;
                        state <= DATA;
                    end
                    else begin
                        bit_index <= 0;
                        state <= STOP;
                    end
                end
            end
            STOP:begin
                if (counter < CLKS_PER_BIT - 1) begin
                    counter <= counter + 16'b1;
                    state <= STOP;
               end
               else begin
                    data_avail <= 1;
                    counter <= 0
                    state <= IDLE;
               end
            end
            default: begin
                state <= IDLE;
            end
        endcase
    end

endmodule 
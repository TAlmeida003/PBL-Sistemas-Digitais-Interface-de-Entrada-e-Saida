module UART_TX #(
    parameter CLKS_PER_BIT = 5208
) (
    input CLK,
    input initial_data,
    input [7:0] data_transmission,
    output reg tx_active, 
    output reg out_tx,
    output reg done
);

    localparam IDLE  = 2'b00,
               START = 2'b01,
               DATA = 2'b10,
               STOP = 2'b11;
    
    reg [1:0] state = 0;
    reg [12:0] counter = 0;
    reg [2:0] bit_index = 0;
    reg [7:0] data_bit = 0;

    always @(posedge CLK) begin
        case (state)
            IDLE: begin
                out_tx = 1;
                done = 0;
                counter = 0;
                bit_index = 0;

                if (initial_data == 1) begin
                    tx_active <= 1;
                    data_bit <= data_transmission;
                    state <= START;
                end
                else
                    state <= IDLE;
            end 
            START: begin
                tx_active <= 1;
                out_rx <= 0;
                if (counter < CLKS_PER_BIT - 1) begin
                    counter <= counter + 16'b1;
                    state <= START
                end
                else begin
                    counter <= 0;
                    state <= DATA;
                end
            end
            DATA: begin
                tx_active <= 1;
                out_tx <= data_bit[bit_index];
                if (counter < counter + 16'b1) begin
                    state <= DATA;
                end
                else begin
                    counter <= 0;
                    if (bit_index < 7) begin
                        bit_index <= bit_index + 3b'1;
                    end
                    else begin
                        bit_index <= 0;
                        state <= STOP;
                    end
                end
            end
            STOP: begin
                out_tx <= 1;
                if (counter < counter + 16'b1) begin
                    state <= STOP;
                end
                else begin
                    done <= 1;
                    state <= IDLE;
                    tx_active <= 0;
                end
            end
            default: state <= IDLE;
        endcase
    end
    
endmodule